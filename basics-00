Is-a Relationship (Inheritance)
In an "is-a" relationship, one class is a specialized version of another class. This relationship is typically modeled using inheritance, where a subclass (child class) inherits attributes and behaviors from a superclass (parent class).

Example:
Consider a class hierarchy for animals:

java
Copy code
class Animal {
    // Common attributes and behaviors of all animals
}

class Dog extends Animal {
    // Specialized attributes and behaviors specific to dogs
}
Here, Dog is-a Animal, meaning it inherits characteristics from the Animal class. The Dog class shares common attributes and behaviors with all animals but may have its own specific attributes and behaviors.

Represented using an arrow with a hollow triangle pointing to the superclass


Has-a Relationship (Composition)
In a "has-a" relationship, one class contains an instance of another class as a member. This relationship is typically modeled using composition, where one class is composed of one or more instances of other classes.

Example:
Consider a class representing a car:

java
Copy code
class Engine {
    // Attributes and behaviors of the engine
}

class Car {
    private Engine engine; // Car has an engine

    // Other attributes and behaviors of the car
}
Here, Car has-a Engine, meaning it contains an instance of the Engine class as one of its members. The Car class delegates some functionality related to the engine to the Engine class.

 Represented using a solid diamond at the containing class and a line pointing to the contained class.

------------------------------------------------------------------------------
 1. Creational Patterns
Creational patterns provide mechanisms to create objects in a controlled manner. They help make a system independent of how its objects are created, composed, and represented.

Singleton: Ensures a class has only one instance and provides a global point of access to it.

Example: Database connection pool.
Factory Method: Defines an interface for creating an object, but lets subclasses alter the type of objects that will be created.

Example: Document creation system in a word processor.
Abstract Factory: Provides an interface for creating families of related or dependent objects without specifying their concrete classes.

Example: GUI toolkit where a window, button, and scrollbar need to be created.
Builder: Separates the construction of a complex object from its representation so that the same construction process can create different representations.

Example: Building a complex query in SQL.
Prototype: Specifies the kinds of objects to create using a prototypical instance, and creates new objects by copying this prototype.

Example: Object cloning in Java.
2. Structural Patterns
Structural patterns deal with object composition or structure. They help ensure that if one part of a system changes, the entire system does not need to change.

Adapter: Converts the interface of a class into another interface that a client expects.

Example: Adapter for converting List to Array.
Bridge: Decouples an abstraction from its implementation so that the two can vary independently.

Example: Separating GUI logic from underlying operating system dependencies.
Composite: Composes objects into tree structures to represent part-whole hierarchies. It lets clients treat individual objects and compositions uniformly.

Example: File system hierarchy.
Decorator: Adds responsibilities to objects dynamically.

Example: Buffered readers and writers in Java I/O.
Facade: Provides a simplified interface to a complex subsystem.

Example: JDBC in Java.
Flyweight: Uses sharing to support large numbers of fine-grained objects efficiently.

Example: String intern pool.
Proxy: Provides a surrogate or placeholder for another object to control access to it.

Example: Proxy pattern for lazy loading.
3. Behavioral Patterns
Behavioral patterns focus on communication between objects and how they operate together.

Chain of Responsibility: Passes a request along a chain of handlers. Each handler decides either to process the request or to pass it to the next handler in the chain.

Example: Logger that passes messages along a chain of logging handlers (error, debug, info).
Command: Encapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations.

Example: GUI buttons and menu items.
Interpreter: Defines a grammatical representation for a language and provides an interpreter to deal with this grammar.

Example: Expression evaluation.
Iterator: Provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.

Example: Java's Iterator interface.
Mediator: Defines an object that encapsulates how a set of objects interact.

Example: Chat room where participants send messages to each other via a mediator.
Memento: Captures and externalizes an object's internal state so that the object can be restored to this state later.

Example: Undo feature in text editors.
Observer: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.

Example: Event handling in GUI frameworks.
State: Allows an object to alter its behavior when its internal state changes. The object will appear to change its class.

Example: State machines in parsing.
Strategy: Defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.

Example: Sorting algorithms in a collection class.
Template Method: Defines the skeleton of an algorithm in a method, deferring some steps to subclasses.

Example: Abstract class with a template method for a game algorithm.
Visitor: Represents an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.

Example: Operations on a hierarchical file system structure.
Example Questions and Design Patterns
How to design a Logger system?

Chain of Responsibility: Different log levels (debug, info, error) can be processed by different handlers in a chain.
How to manage database connections in a web application?

Singleton: Ensure that only one instance of the database connection pool exists.
How to create UI components in a cross-platform application?

Abstract Factory: Create families of related UI components (buttons, windows) for different platforms.
How to enable undo functionality in a text editor?

Memento: Capture and restore the state of the text editor.
How to iterate over elements in a custom data structure?

Iterator: Provide a way to access elements sequentially without exposing the underlying representation.
How to handle different behaviors for a vehicle's driving strategy?

Strategy: Define different driving strategies (normal, aggressive, eco) and switch between them dynamically.
How to execute operations on a composite file system?

Visitor: Define new operations without changing the classes of the file system elements.
Each design pattern addresses a specific problem and provides a reusable solution that can be applied in various contexts. Understanding these patterns helps in designing robust, maintainable, and scalable software systems.
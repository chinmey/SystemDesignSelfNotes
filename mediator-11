This design pattern is used when we have multiple objects and they need to communicate with each other but instead of directly talking they use a mediator

Ex : Airline Management system (multiple planes want to land at same time so how can they communicate), similarly online auction system

The Mediator design pattern defines an object that encapsulates how a set of objects interact. This pattern promotes loose coupling by keeping objects from referring to each other explicitly, and it allows their interaction to be varied independently.

Components of the Mediator Pattern
Mediator Interface: Defines the communication interface for the objects.
Concrete Mediator: Implements the mediator interface and coordinates communication between objects.
Colleague Interface: Defines the interface for communication with the mediator.
Concrete Colleagues: Objects that interact with each other through the mediator.
Example: Chat Room
Consider a chat room where multiple users can send messages to each other. The chat room will act as the mediator, managing the interactions between users.

Mediator Interface
java
Copy code
public interface ChatMediator {
    void showMessage(User user, String message);
}
Concrete Mediator
java
Copy code
import java.util.Date;

public class ChatRoom implements ChatMediator {
    @Override
    public void showMessage(User user, String message) {
        System.out.println(new Date().toString() + " [" + user.getName() + "] : " + message);
    }
}
Colleague Interface
In this example, we don't need a separate colleague interface because the User class will interact directly with the ChatMediator.

Concrete Colleague
java
Copy code
public class User {
    private String name;
    private ChatMediator chatMediator;

    public User(String name, ChatMediator chatMediator) {
        this.name = name;
        this.chatMediator = chatMediator;
    }

    public String getName() {
        return name;
    }

    public void sendMessage(String message) {
        chatMediator.showMessage(this, message);
    }
}
Client Code
java
Copy code
public class MediatorPatternDemo {
    public static void main(String[] args) {
        ChatMediator chatMediator = new ChatRoom();

        User user1 = new User("Alice", chatMediator);
        User user2 = new User("Bob", chatMediator);
        User user3 = new User("Charlie", chatMediator);

        user1.sendMessage("Hello everyone!");
        user2.sendMessage("Hi Alice!");
        user3.sendMessage("Hey guys!");
    }
}
Explanation
Mediator Interface: ChatMediator defines the method showMessage for displaying messages.
Concrete Mediator: ChatRoom implements ChatMediator and manages the message display logic.
Colleague Interface: In this simple example, we use the User class directly.
Concrete Colleagues: User instances interact with each other through the ChatMediator.